


===========    DE::Vector4    ===========

a = (0, 1, 2, 3)

b = (4, 5, 6, 7)

c = (1, 2, 2, 3)

d = (0, 0, 0, 0)




===========    OPERATORS    ===========

[ OK ]	a + a
	result: (0, 2, 4, 6)
	expected: (0, 2, 4, 6)

[ OK ]	a - a
	result: (0, 0, 0, 0)
	expected: (0, 0, 0, 0)

[ OK ]	b * a
	result: (0, 5, 12, 21)
	expected: (0, 5, 12, 21)

[ OK ]	b / DE::Vector4(1,1,2,3)
	result: (4, 5, 3, 2.333333254)
	expected: (4, 5, 3, 2.333333254)

[ OK ]	DE::Vector4(a) -= a
	result: (0, 0, 0, 0)
	expected: (0, 0, 0, 0)

[ OK ]	DE::Vector4(a) += a
	result: (0, 2, 4, 6)
	expected: (0, 2, 4, 6)

[ OK ]	DE::Vector4(a) *= a
	result: (0, 1, 4, 9)
	expected: (0, 1, 4, 9)

[ OK ]	DE::Vector4(a) /= DE::Vector4(1,1,2,3)
	result: (0, 1, 1, 1)
	expected: (0, 1, 1, 1)

[ OK ]	a == a
	result: 1
	expected: 1

[ OK ]	a == b
	result: 0
	expected: 0

[ OK ]	a != a
	result: 0
	expected: 0

[ OK ]	a != b
	result: 1
	expected: 1




===========    ARRAY ACCESS    ===========

[ OK ]	a[0]
	result: 0
	expected: 0

[ OK ]	a[1]
	result: 1
	expected: 1

[ OK ]	a[2]
	result: 2
	expected: 2

[ OK ]	a[3]
	result: 3
	expected: 3




===========    FUNCTIONS    ===========

[ OK ]	DE::Vector4(a).add(a)
	result: (0, 2, 4, 6)
	expected: (0, 2, 4, 6)

[ OK ]	DE::Vector4(a).sub(a)
	result: (0, 0, 0, 0)
	expected: (0, 0, 0, 0)

[ OK ]	DE::Vector4(a).mul(DE::Vector4(2,2,2,2))
	result: (0, 2, 4, 6)
	expected: (0, 2, 4, 6)

[ OK ]	DE::Vector4(a).div(DE::Vector4(2,2,2,2))
	result: (0, 0.5, 1, 1.5)
	expected: (0, 0.5, 1, 1.5)

[ OK ]	DE::Vector4(a).add(1)
	result: (1, 2, 3, 4)
	expected: (1, 2, 3, 4)

[ OK ]	DE::Vector4(a).sub(1)
	result: (-1, 0, 1, 2)
	expected: (-1, 0, 1, 2)

[ OK ]	DE::Vector4(a).mul(2)
	result: (0, 2, 4, 6)
	expected: (0, 2, 4, 6)

[ OK ]	DE::Vector4(a).div(2)
	result: (0, 0.5, 1, 1.5)
	expected: (0, 0.5, 1, 1.5)

c.div(2) = (0.5, 1, 1, 1.5)

[ OK ]	c
	result: (0.5, 1, 1, 1.5)
	expected: (0.5, 1, 1, 1.5)

[ OK ]	DE::Vector4(b).lerp(a, 0.5f)
	result: (2, 3, 4, 5)
	expected: (2, 3, 4, 5)

[ OK ]	DE::Vector4(b).lerp(a, 0.1f)
	result: (3.599999905, 4.599999905, 5.599999905, 6.599999905)
	expected: (3.599999905, 4.599999905, 5.599999905, 6.599999905)

[ OK ]	DE::Vector4(b).lerp(a, 0.823f)
	result: (0.7079999447, 1.707999945, 2.707999945, 3.707999945)
	expected: (0.7079999447, 1.707999945, 2.707999945, 3.707999945)

[ OK ]	a.dot(a)
	result: 14
	expected: 14

[ OK ]	a.dot(b)
	result: 38
	expected: 38

[ OK ]	a.sqrlen()
	result: 14
	expected: 14

[ OK ]	a.len()
	result: 3.741657495
	expected: 3.741657495

[ OK ]	a.max()
	result: 3
	expected: 3

[ OK ]	a.min()
	result: 0
	expected: 0

[ OK ]	a.sqrdst(b)
	result: 64
	expected: 64

[ OK ]	a.dst(b)
	result: 8
	expected: 8

[ OK ]	a.eq(b,0)
	result: 0
	expected: 0

[ OK ]	a.eq(b,10)
	result: 1
	expected: 1

[ OK ]	DE::Vector4(a).nor()
	result: (0, 0.2672612369, 0.5345224738, 0.8017836809)
	expected: (0, 0.2672612369, 0.5345224738, 0.8017836809)

[ OK ]	DE::Vector4(a).clamp(0.1f).len()
	result: 0.1000000015
	expected: 0.1000000015
	epsilon: 0.1000000015

[ OK ]	DE::Vector4(a).clamp(0.2f).len()
	result: 0.200000003
	expected: 0.200000003
	epsilon: 0.1000000015

[ OK ]	DE::Vector4(a).clamp(0.3f).len()
	result: 0.2999999821
	expected: 0.3000000119
	epsilon: 0.1000000015

[ OK ]	DE::Vector4(a).clamp(0.4f).len()
	result: 0.400000006
	expected: 0.400000006
	epsilon: 0.1000000015

[ OK ]	DE::Vector4(a).clamp(0.5f).len()
	result: 0.4999999702
	expected: 0.5
	epsilon: 0.1000000015


0.007631 44 0
