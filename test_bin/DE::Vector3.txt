


===========    DE::Vector3    ===========

a = (0, 1, 2)

b = (4, 5, 6)

c = (1, 2, 2)

d = (0, 0, 0)




===========    OPERATORS    ===========

[ OK ]	a + a
	result: (0, 2, 4)
	expected: (0, 2, 4)

[ OK ]	a - a
	result: (0, 0, 0)
	expected: (0, 0, 0)

[ OK ]	b * a
	result: (0, 5, 12)
	expected: (0, 5, 12)

[ OK ]	b / DE::Vector3(1,1,2)
	result: (4, 5, 3)
	expected: (4, 5, 3)

[ OK ]	DE::Vector3(a) -= a
	result: (0, 0, 0)
	expected: (0, 0, 0)

[ OK ]	DE::Vector3(a) += a
	result: (0, 2, 4)
	expected: (0, 2, 4)

[ OK ]	DE::Vector3(a) *= a
	result: (0, 1, 4)
	expected: (0, 1, 4)

[ OK ]	DE::Vector3(a) /= DE::Vector3(1,1,2)
	result: (0, 1, 1)
	expected: (0, 1, 1)

[ OK ]	a == a
	result: 1
	expected: 1

[ OK ]	a == b
	result: 0
	expected: 0

[ OK ]	a != a
	result: 0
	expected: 0

[ OK ]	a != b
	result: 1
	expected: 1




===========    ARRAY ACCESS    ===========

[ OK ]	a[0]
	result: 0
	expected: 0

[ OK ]	a[1]
	result: 1
	expected: 1

[ OK ]	a[2]
	result: 2
	expected: 2




===========    FUNCTIONS    ===========

[ OK ]	DE::Vector3(a).add(a)
	result: (0, 2, 4)
	expected: (0, 2, 4)

[ OK ]	DE::Vector3(a).sub(a)
	result: (0, 0, 0)
	expected: (0, 0, 0)

[ OK ]	DE::Vector3(a).mul(DE::Vector3(2,2,2))
	result: (0, 2, 4)
	expected: (0, 2, 4)

[ OK ]	DE::Vector3(a).div(DE::Vector3(2,2,2))
	result: (0, 0.5, 1)
	expected: (0, 0.5, 1)

[ OK ]	DE::Vector3(a).add(1)
	result: (1, 2, 3)
	expected: (1, 2, 3)

[ OK ]	DE::Vector3(a).sub(1)
	result: (-1, 0, 1)
	expected: (-1, 0, 1)

[ OK ]	DE::Vector3(a).mul(2)
	result: (0, 2, 4)
	expected: (0, 2, 4)

[ OK ]	DE::Vector3(a).div(2)
	result: (0, 0.5, 1)
	expected: (0, 0.5, 1)

c.div(2) = (0.5, 1, 1)

[ OK ]	c
	result: (0.5, 1, 1)
	expected: (0.5, 1, 1)

[ OK ]	DE::Vector3(b).lerp(a, 0.5f)
	result: (2, 3, 4)
	expected: (2, 3, 4)

[ OK ]	DE::Vector3(b).lerp(a, 0.1f)
	result: (3.599999905, 4.599999905, 5.599999905)
	expected: (3.599999905, 4.599999905, 5.599999905)

[ OK ]	DE::Vector3(b).lerp(a, 0.823f)
	result: (0.7079999447, 1.707999945, 2.707999945)
	expected: (0.7079999447, 1.707999945, 2.707999945)

[ OK ]	a.dot(a)
	result: 5
	expected: 5

[ OK ]	a.dot(b)
	result: 17
	expected: 17

[ OK ]	a.sqrlen()
	result: 5
	expected: 5

[ OK ]	a.len()
	result: 2.23606801
	expected: 2.23606801

[ OK ]	a.max()
	result: 2
	expected: 2

[ OK ]	a.min()
	result: 0
	expected: 0

[ OK ]	a.sqrdst(b)
	result: 48
	expected: 48

[ OK ]	a.dst(b)
	result: 6.928203106
	expected: 6.928203106

[ OK ]	a.eq(b,0)
	result: 0
	expected: 0

[ OK ]	a.eq(b,10)
	result: 1
	expected: 1

[ OK ]	DE::Vector3(a).nor()
	result: (0, 0.4472135901, 0.8944271803)
	expected: (0, 0.4472135901, 0.8944271803)

[ OK ]	DE::Vector3(1,0,0).cross(DE::Vector3(0,1,0))
	result: (0, 0, 1)
	expected: (0, 0, 1)

[ OK ]	DE::Vector3(1,0,0).cross(DE::Vector3(0,-1,0))
	result: (0, 0, -1)
	expected: (0, 0, -1)

[ OK ]	DE::Vector3(-1,0,0).cross(DE::Vector3(0,1,0))
	result: (0, 0, -1)
	expected: (0, 0, -1)

[ OK ]	a.angle(a)
	result: 0
	expected: 0

[ OK ]	DE::Vector3(1,0,0).angle(DE::Vector3(0,1,0))*(180/3.14159265358979323846)
	result: 90
	expected: 90

[ OK ]	DE::Vector3(1,0,0).angle(DE::Vector3(0,-1,0))*(180/3.14159265358979323846)
	result: 90
	expected: 90

[ OK ]	DE::Vector3(1,0,0).angle(DE::Vector3(1,1,0))*(180/3.14159265358979323846)
	result: 45
	expected: 45

[ OK ]	DE::Vector3(1,0,0).angle(DE::Vector3(1,-1,0))*(180/3.14159265358979323846)
	result: 45
	expected: 45

[ OK ]	DE::Vector3(-1,0,0).angle(DE::Vector3(-1,-1,0))*(180/3.14159265358979323846)
	result: 45
	expected: 45

[ OK ]	DE::Vector3(1,0,0).angle(DE::Vector3(-1,0,0))*(180/3.14159265358979323846)
	result: 180
	expected: 180

[ OK ]	DE::Vector3(1,0,0).angle(DE::Vector3(-1,0,1))*(180/3.14159265358979323846)
	result: 135
	expected: 135

[ OK ]	DE::Vector3(1,0,0).angle(DE::Vector3(-1,0,-1))*(180/3.14159265358979323846)
	result: 135
	expected: 135

[ OK ]	a.angle(a, DE::Vector3(0,1,0))
	result: 0
	expected: 0

[ OK ]	DE::Vector3(1,0,0).angle(DE::Vector3(0,1,0), DE::Vector3(0,0,1))*(180/3.14159265358979323846)
	result: 90
	expected: 90

[ OK ]	DE::Vector3(1,0,0).angle(DE::Vector3(0,-1,0), DE::Vector3(0,0,1))*(180/3.14159265358979323846)
	result: 270
	expected: 270

[ OK ]	DE::Vector3(1,0,0).angle(DE::Vector3(1,1,0), DE::Vector3(0,0,1))*(180/3.14159265358979323846)
	result: 45
	expected: 45

[ OK ]	DE::Vector3(1,0,0).angle(DE::Vector3(1,-1,0), DE::Vector3(0,0,1))*(180/3.14159265358979323846)
	result: 315
	expected: 315

[ OK ]	DE::Vector3(-1,0,0).angle(DE::Vector3(-1,-1,0), DE::Vector3(0,0,1))*(180/3.14159265358979323846)
	result: 45
	expected: 45

[ OK ]	DE::Vector3(1,0,0).angle(DE::Vector3(-1,0,0), DE::Vector3(0,1,0))*(180/3.14159265358979323846)
	result: 180
	expected: 180

[ OK ]	DE::Vector3(1,0,0).angle(DE::Vector3(-1,0,1), DE::Vector3(0,1,0))*(180/3.14159265358979323846)
	result: 225
	expected: 225

[ OK ]	DE::Vector3(1,0,0).angle(DE::Vector3(-1,0,-1), DE::Vector3(0,1,0))*(180/3.14159265358979323846)
	result: 135
	expected: 135

[ OK ]	DE::Vector3(a).clamp(0.1f).len()
	result: 0.1000000015
	expected: 0.1000000015
	epsilon: 9.999999747e-06

[ OK ]	DE::Vector3(a).clamp(0.2f).len()
	result: 0.200000003
	expected: 0.200000003
	epsilon: 9.999999747e-06

[ OK ]	DE::Vector3(a).clamp(0.3f).len()
	result: 0.3000000119
	expected: 0.3000000119
	epsilon: 9.999999747e-06

[ OK ]	DE::Vector3(a).clamp(0.4f).len()
	result: 0.400000006
	expected: 0.400000006
	epsilon: 9.999999747e-06

[ OK ]	DE::Vector3(a).clamp(0.5f).len()
	result: 0.4999999702
	expected: 0.5
	epsilon: 9.999999747e-06


0.016638 64 0
