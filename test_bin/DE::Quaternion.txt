


===========    DE::Quaternion    ===========

a = [(0, 1, 2), 3]

b = [(4, 5, 6), 7]

c = [(1, 2, 2), 3]

d = [(0.122788, 0.241845, 0.664463), 0.696364]

e = [(0, 0, 0), 1]

f = [(0.992404, 0.0868241, -0.0868241), 0.00759608]

g = [(0.992404, 0.0868241, -0.0868241), 0.00759608]

h = [(0, 0, 0), 1]




===========    OPERATORS    ===========

[ OK ]	a + a
	result: [(0, 2, 4), 6]
	expected: [(0, 2, 4), 6]

[ OK ]	a - a
	result: [(0, 0, 0), 0]
	expected: [(0, 0, 0), 0]

[ OK ]	b * a
	result: [(32, 34, 60), 4]
	expected: [(32, 34, 60), 4]

[ OK ]	b / a
	result: [(27.7142849, 35.07143021, 40.7142868), 2.714285851]
	expected: [(27.7142849, 35.07143021, 40.7142868), 2.714285851]

[ OK ]	DE::Quaternion(a) -= a
	result: [(0, 0, 0), 0]
	expected: [(0, 0, 0), 0]

[ OK ]	DE::Quaternion(a) += a
	result: [(0, 2, 4), 6]
	expected: [(0, 2, 4), 6]

[ OK ]	DE::Quaternion(a) *= a
	result: [(0, 6, 12), 4]
	expected: [(0, 6, 12), 4]

[ OK ]	DE::Quaternion(a) /= a
	result: [(0, 2.785714149, 5.571428299), 1]
	expected: [(0, 2.785714149, 5.571428299), 1]

[ OK ]	a == a
	result: 1
	expected: 1

[ OK ]	a == b
	result: 0
	expected: 0

[ OK ]	a != a
	result: 0
	expected: 0

[ OK ]	a != b
	result: 1
	expected: 1




===========    ARRAY ACCESS    ===========

[ OK ]	a[0]
	result: 0
	expected: 0

[ OK ]	a[1]
	result: 1
	expected: 1

[ OK ]	a[2]
	result: 2
	expected: 2

[ OK ]	a[3]
	result: 3
	expected: 3




===========    METHODS    ===========

[ OK ]	a.dot(a)
	result: 14
	expected: 14

[ OK ]	a.dot(b)
	result: 38
	expected: 38

[ OK ]	a.sqrlen()
	result: 14
	expected: 14

[ OK ]	a.len()
	result: 3.741657495
	expected: 3.741657495

[ OK ]	a.eq(b,0)
	result: 0
	expected: 0

[ OK ]	a.eq(b,10)
	result: 1
	expected: 1

[ OK ]	DE::Quaternion(a).nor()
	result: [(0, 0.2672612369, 0.5345224738), 0.8017836809]
	expected: [(0, 0.2672612369, 0.5345224738), 0.8017836809]

[ OK ]	DE::Quaternion(a).nor().len()
	result: 0.9999999404
	expected: 1
	epsilon: 9.999999747e-06

[ OK ]	e.toEuler().eq(DE::Vector3(0,0,0),0.000001f)
	result: 1
	expected: 1

f.toEuler() = (-180, 9.92992878, 10.08211613)

[ OK ]	f.toEuler().eq(DE::Vector3(-180,10,10),0.1f)
	result: 1
	expected: 1


0.01335 26 0
